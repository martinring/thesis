import type { Shape } from "plotly.js"

export default function (elem: HTMLElement) {
  const xs = Array.from(Array(261).keys()).map(x => x / 260)  

  const plot = Plotly.newPlot(elem, [{
    name: 'observed',
    mode: "markers",
    marker: {
      symbol: 'x-thin-open',
      color: 'gray'      
    },
    x: [1, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 8, 9, 9, 10, 10, 11, 11, 11, 12, 12, 13, 14, 14, 15, 15, 17, 18, 18, 19, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 23, 24, 24, 25, 25, 25, 26, 26, 26, 27, 28, 28, 29, 29, 29, 30, 30, 31, 31, 31, 32, 32, 32, 33, 33, 34, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 39, 40, 40, 40, 41, 41, 41, 42, 42, 43, 43, 43, 44, 44, 44, 45, 45, 45, 46, 46, 46, 47, 47, 48, 48, 48, 49, 49, 50, 50, 50, 51, 51, 51, 52, 52, 52, 53, 53, 53, 54, 54, 54, 55, 55, 55, 56, 56, 56, 57, 57, 58, 58, 58, 59, 59, 60, 60, 60, 61, 61, 61, 62, 62, 63, 63, 64, 64, 64, 65, 65, 65, 66, 66, 66, 67, 67, 67, 68, 68, 68, 69, 69, 69, 70, 70, 71, 71, 71, 72, 72, 72, 73, 73, 73, 74, 74, 75, 75, 76, 76, 76, 77, 77, 78, 78, 78, 79, 79, 79, 80, 81, 81, 81, 82, 82, 83, 83, 83, 84, 84, 84, 85, 85, 85, 86, 86, 86, 87, 87, 87, 88, 88, 88, 89, 89, 89, 90, 90, 90, 91, 91, 91, 92, 92, 92, 93, 93, 93, 94, 94, 94, 95, 95, 95, 96, 96, 96, 97, 97, 97, 98, 98, 98, 99, 99, 99, 100, 100, 100, 101, 101, 102, 102, 103, 103, 103, 104, 104, 104, 105, 105, 106, 106, 106, 107, 107, 107, 108, 108, 108, 109, 109, 109, 110, 110, 110, 111, 111, 111, 112, 112, 112, 113, 113, 113, 114, 114, 114, 115, 115, 115, 116, 116, 116, 117, 117, 118, 118, 118, 119, 119, 119, 120, 120, 120, 121, 121, 121, 122, 122, 122, 123, 123, 124, 124, 124, 125, 125, 125, 126, 126, 126, 127, 127, 127, 128, 128, 128, 129, 129, 129, 130, 130, 130, 131, 131, 131, 132, 132, 132, 133, 133, 133, 134, 134, 134, 135, 135, 135, 136, 136, 136, 137, 137, 137, 138, 138, 138, 139, 139, 139, 140, 140, 140, 141, 141, 141, 142, 142, 142, 143, 143, 143, 144, 144, 144, 145, 145, 145, 146, 146, 146, 147, 147, 147, 148, 148, 148, 149, 149, 149, 150, 150, 150, 151, 151, 151, 152, 152, 152, 153, 153, 153, 154, 154, 155, 155, 155, 156, 156, 157, 157, 157, 158, 158, 158, 159, 159, 160, 160, 160, 161, 161, 161, 162, 162, 163, 163, 163, 164, 164, 164, 165, 165, 165, 166, 166, 166, 167, 167, 167, 168, 168, 168, 169, 169, 169, 170, 170, 171, 171, 171, 172, 172, 172, 173, 173, 173, 174, 174, 174, 175, 175, 176, 176, 176, 177, 177, 177, 178, 178, 178, 179, 179, 179, 180, 181, 181, 181, 182, 182, 182, 183, 183, 184, 184, 184, 185, 185, 185, 186, 186, 186, 187, 187, 187, 188, 188, 189, 189, 189, 190, 190, 190, 191, 191, 191, 192, 192, 193, 193, 194, 194, 195, 195, 196, 196, 196, 197, 197, 198, 199, 199, 200, 200, 201, 201, 202, 202, 202, 203, 203, 203, 204, 205, 205, 206, 207, 207, 208, 208, 209, 209, 209, 210, 210, 211, 211, 211, 212, 212, 213, 213, 214, 214, 215, 215, 215, 216, 216, 217, 217, 218, 219, 219, 219, 220, 221, 221, 222, 222, 223, 223, 224, 224, 225, 225, 226, 228, 228, 229, 229, 230, 231].map(x => (261 - x) / 260),
    y: [8862, 10909, 9554, 5973, 8683, 5574, 14118, 8295, 9983, 14413, 9311, 17118, 7661, 7324, 4051, 6647, 8401, 10751, 8737, 11157, 10831, 7140, 8226, 6688, 7091, 12240, 22368, 5117, 23551, 11071, 21672, 82118, 11841, 12020, 97247, 13305, 6463, 26184, 119082, 97493, 82741, 147695, 15998, 16683, 12569, 6471, 155991, 8615, 17615, 9011, 24140, 24009, 16996, 10363, 7430, 5406, 97187, 25271, 19048, 10166, 16690, 15055, 5255, 24242, 21415, 13308, 18660, 21818, 11972, 8832, 3899, 11622, 16250, 20981, 110915, 18762, 228478, 29925, 6916, 30352, 21962, 162466, 8887, 8375, 30965, 22146, 158601, 27228, 23477, 13064, 19517, 28501, 14340, 13287, 27230, 28000, 121208, 23621, 21834, 5984, 8016, 146065, 27788, 198428, 164788, 208805, 35596, 30429, 19853, 12144, 29022, 10644, 179510, 23913, 39953, 12793, 18768, 9589, 185238, 10741, 28000, 262239, 193654, 6034, 30223, 40630, 9758, 26482, 36941, 131326, 228104, 38476, 37782, 31685, 36574, 123624, 28348, 29726, 22579, 23314, 6978, 39407, 29339, 37165, 1041019, 30018, 67133, 31395, 21414, 27117, 6883, 146564, 178615, 323430, 6466, 15025, 255188, 36497, 19520, 26612, 4659, 13081, 302687, 6594, 566285, 28583, 29596, 417529, 283152, 22392, 65087, 43543, 25042, 251175, 20779, 12712, 636059, 214513, 330321, 209117, 71862, 37591, 23906, 48016, 184416, 54884, 39982, 151130, 188144, 249019, 33079, 450102, 3726058, 18615, 41355, 341311, 1074051, 4912, 211062, 482609, 28752, 325059, 34584, 11730, 24160, 321237, 318527, 56867, 14322, 37093, 68248, 232379, 17995, 38378, 345849, 247910, 51330, 679559, 295926, 237546, 35768, 244098, 27547, 53525, 219768, 29530, 47894, 439712, 28935, 411307, 259383, 302572, 200577, 24024, 8060, 19125, 316476, 32828, 90542, 37285, 878174, 46879, 57150, 72740, 24878, 30649, 50696, 437117, 76738, 354517, 385258, 74044, 279748, 59095, 9354, 238888, 51642, 435986, 19554, 24024, 79720, 338801, 1730005, 352384, 264666, 5374, 1523549, 347693, 244622, 47620, 41586, 286544, 1078893, 116031, 28250, 480105, 534350, 880582, 487312, 84642, 85569, 794582, 33869, 20882, 143944, 383486, 408293, 98194, 60940, 43424, 5057679, 84835, 52849, 34680, 271107, 1422163, 1361341, 38145, 463299, 506249, 3252152, 14785, 277351, 59260, 24355, 39743, 4140804, 579301, 512957, 187532, 117674, 182127, 153959, 132181, 1357203, 94373, 30791, 582755, 59310, 186216, 48405, 272361, 73717, 1284281, 79636, 1224222, 56245, 103282, 58033, 2559898, 100657, 24966, 512990, 305430, 176070, 3034891, 21495445, 19269, 565344, 1159639, 69183, 70215, 44587, 200798, 346142, 555579, 1558549, 1435838, 1120502, 400241, 1439713, 148213, 1789601, 65225, 1476696, 223150, 20780126, 477035, 2778836, 4866268, 76160, 5771, 1275776, 49118, 358432, 110544, 1345464, 86185, 30928, 178592, 170067, 799666, 65602, 1045443, 9761, 778927, 382768, 498670, 1005125, 946035, 6794957, 463516, 566999, 357824, 1045176, 684978, 75206, 4950174, 410147, 6824957, 1743503, 1596056, 29557, 866703, 466352, 669780, 944505, 266971, 147156, 129315, 512398, 162887, 107303, 144164, 3567265, 88353, 1022176, 42951, 124538, 9566, 961804, 244389, 205119, 11084471, 825016, 1085910, 76014, 830724, 2627345, 1389453, 484045, 184353, 766004, 7170663, 37090, 1895797, 1375700, 1015563, 616526, 328722, 111617, 9872842, 1614864, 199190, 1342628, 128561, 1618211, 248445, 672328, 614618, 2351971, 1554622, 105971, 147471, 271500, 105256, 181448, 427746, 4338384, 241968, 2751514, 2006838, 2834307, 7660955, 1199756, 1059103, 657309, 1269282, 311096, 102252, 1519032, 179426, 217354, 14341474, 13416496, 681492, 1374379, 1383214, 688961, 366579, 11941647, 3392517, 12488284, 1984786, 1333756, 20324801, 32822, 155122, 945730, 7335581, 74549, 383093, 3458680, 2819300, 17305426, 942654, 151589, 18338432, 1087140, 1021919, 2667809, 492953, 1059914, 4742724, 6568406, 40212, 20050397, 1198582, 957778, 7558013, 523682, 4167416, 4572885, 4825486, 799484, 23130699, 9997738, 1572120, 1710069, 7604312, 21940190, 7596435, 1531568, 741701, 1671636, 2490197, 1146223, 20366610, 9228497, 735431, 442942, 6413849, 8869684, 12737, 47563450, 29686123, 32464, 4923554, 1570431, 48111121, 4528213, 193100, 10121007, 756550, 1463531, 501418, 178088, 13929278, 1197294, 1319410, 31849662, 260764, 2766630, 9165471, 1172462, 24333363, 415280, 10447297, 451303, 12911001, 2078897, 49240690, 31676116, 20343113, 17677651, 20316484, 1317188, 19926256, 14960873, 52957452, 33037134, 8297559, 22523865, 29506379, 21979810, 15519334, 4119568, 59902877, 14821151, 6656751, 3959750, 3562651, 23615384, 8885967, 8881177, 6504378, 20897584, 20015936, 41791207, 29225204, 13451470].map(x => Math.log(x - 5000) / 30)
  },{
    name: 'best',
    mode: "markers",
    marker: {
      symbol: 'circle-open',
      color: 'green'
    },
    x: [0.2307692],
    y: [0.298459]
  }], {
    yaxis: {
      title: 'Ratio of Logarithmic Proof Time <i>T̂</i><sub>φ</sub>(<i>X</i>)',
      range: [0, 1]
    },
    xaxis: {
      title: 'Ratio of fixed variables |<i>X</i>|',
      range: [0, 1]
    },
    font: {
      family: 'var(--font-body)'
    },
    shapes: [{
      type: 'line',
      x0: 0,
      x1: 1,
      y0: 0.45,
      y1: 0.45,
      line: {
        dash: 'dot',
        width: 1                                
      }      
    },{
      type: 'line',
      x0: 0.38,
      x1: 0.38,
      y0: 0,
      y1: 1,
      line: {
        dash: 'dot',
        width: 1                                
      }      
    },... Array.from(Array(14).keys()).map(x => {
      const r = (x + 1) / 10
      return {
        type: "circle",
        x0: -r,
        y0: -r,
        x1: r,
        y1: r,
        line: {
          width: 1,
          dash: "solid",
          color: "black"
        }
      }
    })],
    annotations: [
      {
        text: 'τ(φ)',
        x: 0.38,
        xanchor: "center",
        y: 1,
        yanchor: "top",
        showarrow: false,
        bgcolor: "white",
        font: {
          size: "150%"
        }
      },
      {
        text: 'T<sub style="font-style:italic">max</sub>',
        x: 1,
        yanchor: "center",
        xanchor: "right",
        y: 0.45,
        showarrow: false,
        bgcolor: "white",        
      },
      ...Array.from(Array(14).keys()).flatMap(x => {
      const r = (x + 1) / 10
      const phi = 0.12 / r
      const phi2 = 1.02 / r
      return [{
        text: r.toFixed(1).toString(),
        showarrow: false,
        textangle: phi / (Math.PI / 180),
        bgcolor: 'white',      
        y: r * Math.cos(phi),
        x: r * Math.sin(phi)        
      },{
        text: r.toFixed(1).toString(),
        showarrow: false,
        textangle: phi2 / (Math.PI / 180),
        bgcolor: 'white',
        y: r * Math.cos(phi2),
        x: r * Math.sin(phi2)
      }]
    })],
    margin: { t: 10, b: 45 }
  },
    {
      responsive: true,
      displaylogo: false
    });
  if (window.navigator.userAgent == 'PDF') plot.then(plot => {
    Plotly.toImage(plot, { format: "svg", width: elem.clientWidth, height: elem.clientHeight }).then(x => {
      const obj = document.createElement('object')
      fetch(x).then(x => x.text().then(x => {
        elem.innerHTML = x
        elem.firstElementChild.removeAttribute('width')
        elem.firstElementChild.removeAttribute('height')
        elem.firstElementChild.setAttribute('preserveAspectRatio', 'xMidYMid meet')
        elem.replaceWith(elem.firstElementChild)
      }))
    })
  });
}